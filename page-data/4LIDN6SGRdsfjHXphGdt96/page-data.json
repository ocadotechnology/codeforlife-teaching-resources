{"componentChunkName":"component---src-templates-worksheet-js","path":"/4LIDN6SGRdsfjHXphGdt96","result":{"data":{"contentfulWorksheet":{"worksheetTitle":"Teacher Challenge Guide 1","resourceSection":"Challenge 1","content":[{"__typename":"ContentfulFullWidthText","heading":{"name":"Introduction"},"content":{"content":"## Objectives\n* To gain familiarity with the Kurono environment and the turn-based approach\n* To recap on:\n  * selection logic\n  * random number generation\n  * the basic use of subroutines\n\n"}},{"__typename":"Contentful2ColumnLayout","heading":{"name":"Preparing for the Lesson"},"leftColumn":{"leftColumn":"## Teacher Preparation\n* Find out how to access Kurono\n* Create a new game for your class by assigning a worksheet\n* Read over the pupil worksheet\n\n> ### Resources\n>You can find the Kurono user guide, cheat sheet and challenge resources on your Kurono dashboard: https://www.codeforlife.education/teach/kurono/dashboard\n\n> ### Terminology\n* Avatar – digital player representing the pupil\n* Artefact – a special object that can be collected\n* Console log – the area at the bottom left of Kurono, used for output (print) messages"},"rightColumn":{"rightColumn":"## Timing\nOne lesson of approximately **50 mins**\n\n> ### Pupils’ prior experience\n>Pupils should be familiar with Python programming,\nincluding the use of:\n* Variables\n* Assignment\n* Selection\n* Functions and procedures (subroutines)\n* Parameters"}},{"__typename":"ContentfulFullWidthText","heading":null,"content":{"content":"## Introduction\n1. Introduce the environment: the aim of the game, how to run your code, concepts of the map, other avatars and artefacts (see Kurono User Guide)\n2. Explain the turn-based model. A board game is a good analogy — you're only able to make a move when it's your turn and don't necessarily control your player directly\n3. Explain the default code as necessary *[Fig 1.]*\n4. Demo changing the code — make avatar walk in one direction only\n5. Pupils start Kurono and change the code as the teacher did"}},{"__typename":"Contentful2ColumnLayout","heading":{"name":"Task 1 - Introduction "},"leftColumn":{"leftColumn":"`NORTH, EAST, SOUTH` and `WEST` are constants in the `direction` object. \nThe code `MoveAction(new_dir)` converts the direction into a `MoveAction` so that Kurono understands it. \n\nThe `return` keyword returns this move to Kurono’s turn handler.\n"},"rightColumn":{"rightColumn":"```\ndef next_turn(world_state, avatar_state):\n    new_dir = direction.NORTH\n    # Your code goes here  \n    action = MoveAction(new_dir)\n    return action\n``` \n*[Fig 1]*"}},{"__typename":"Contentful2ColumnLayout","heading":{"name":"Task 2 - Change Direction"},"leftColumn":{"leftColumn":"All pupils need to do here is move in any direction other than North simply so they can try out the interface. *[Fig 2]*"},"rightColumn":{"rightColumn":"**Example Solution**\n\n```\ndef next_turn(world_state, avatar_state):\n    new_dir = direction.SOUTH\n    # Your code goes here  \n    action = MoveAction(new_dir)\n    return action\n``` \n*[Fig 2]*"}},{"__typename":"Contentful2ColumnLayout","heading":{"name":"Task 3 - Move in all directions"},"leftColumn":{"leftColumn":"**Recap**\n\nAsk pupils or recap on what `random.randint(start, stop)` does. \nE.g. `print(random.randint(1,6))`\n"},"rightColumn":{"rightColumn":"![Indent](//images.ctfassets.net/x5ignlfoflka/7yHJGXdu6eVuH1VbfDWZB7/343b7a836032af3bf9274103fa1dceff/Screenshot_2020-02-17_at_13.57.18.png)\n\n*[Fig 3]*"}},{"__typename":"Contentful2ColumnLayout","heading":null,"leftColumn":{"leftColumn":"## Move in all directions\n\n* Pupils may need some hints to work out that they can use a randomly generated number between 1 and 4 to help them choose a random direction to go in.\n* Then they'll need to use an `if…elif…else` statement to choose the appropriate direction constant. *[Fig 4]*\n\n**Potential pitfalls:**\n\n* Poor structure of `if…elif…else` statement\n* Forgetting to turn the direction constant `new_dir` into an action with `action = MoveAction(new_dir)`\n\n\n\n"},"rightColumn":{"rightColumn":"**Solution**\n\n```\nimport random\n\ndef next_turn(world_state, avatar_state):\n    # Choose a random direction to move in number  \n    number = random.randint(1,4)\n    if number == 1:\n        new_dir = direction.NORTH\n    elif number == 2:\n        new_dir = direction.EAST\n    elif number == 3:\n        new_dir = direction.SOUTH\n    else:\n        new_dir = direction.WEST\n    action = MoveAction(new_dir)\n    return action\n```\n*[Fig 4]*"}},{"__typename":"Contentful2ColumnLayout","heading":{"name":"Task 4 - Investigate Location"},"leftColumn":{"leftColumn":"Pupils will probably have noticed that their avatar bumps into obstacles and can get stuck. This next task starts to look at how to avoid this by checking if they can move into a cell before making their move. Pupils need to start with a working solution to task 3. Give them some code and explain how it works, if necessary.\n\n`avatar_state` is an object in Kurono that knows about the avatar, including their current location. The Kurono map is arranged on a 16x16 grid using x-y coordinates. The centre of the map has coordinates of 0,0.\n\n*Cross-curricular note: pupils will know about x,y coordinates from Maths. What is the name for cell where x is 0 and y is 0? Answer: it's the origin)*\n"},"rightColumn":{"rightColumn":"Pupils can print out the coordinates of their avatar using this code:\n\n`print(avatar_state.location)`\n\n```console\nLocation(-14, 12)\nLocation(-14, 12)\nLocation(-14, 12)\nLocation(-14, 12)\n```\nPupils can also find out the x and y values separately.\n\n`print(\"x is\", avatar_state.location.x)`\n\n`print(\"y is\", avatar_state.location.y)`\n\n```console\nLocation(-11, -7)\nx is -11\ny is -7\n\nLocation(-11, -8)\nx is -11\ny is -8\n\nLocation(-10, -8)\nx is -10\ny is -8\n"}},{"__typename":"ContentfulFullWidthText","heading":null,"content":{"content":"Having the avatar’s location, pupils can find out if they can move into an adjacent cell by adding a direction constant. *[Fig 5]*\n\n```\nnew_dir = direction.NORTH # Let’s assume you were going to move North\nnext_cell = avatar_state.location + new_dir \n# Ask Kurono for details about the cell you would move onto\nprint(\"The coordinates of the next cell are\", next_cell)\nprint(\"Can I move into this cell?\", world_state.can_move_to(next_cell))\n\n```\n*[Fig 5]*\n\n```console\nThe coordinates of the next cell are Location(-14, -2)\nCan I move into this cell? True\n\nThe coordinates of the next cell are Location(-14, -1)\nCan I move into this cell? True\n\nThe coordinates of the next cell are Location(-14, 0)\nCan I move into this cell? False\n```\n\nAs you can see, `world_state.can_move_to` returns a Boolean value. Pupils can use this to decide what to do next. Worksheet 2 picks up from this point."}},{"__typename":"Contentful2ColumnLayout","heading":{"name":"Solution"},"leftColumn":{"leftColumn":"```\nimport random\n\ndef next_turn(world_state, avatar_state):\n    # Choose a random direction to move in\n    number = random.randint(1,4)\n    if number == 1:\n        new_dir = direction.NORTH\n    elif number == 2:\n        new_dir = direction.EAST\n    elif number == 3:\n        new_dir = direction.SOUTH\n    else:\n        new_dir = direction.WEST\n        # Ask Kurono for details about the cell\n        # you would move onto\n        next_cell = (\n            avatar_state.location + new_dir\n        )\n        print(\n            \"The coordinates of\",\n            \"the next cell are\",\n            next_cell,\n        )\n    if world_state.can_move_to(next_cell):\n        print(\"Yes, I can move\")\n    else:\n        print(\"I can't move there!\")\n    action = MoveAction(new_dir)\n\n    return action\n\n```"},"rightColumn":{"rightColumn":"```console\nThe coordinates of the next cell are Location(-14, -2)\nI can't move there!\n\nThe coordinates of the next cell are Location(-14, -1)\nYes, I can move\n\nThe coordinates of the next cell are Location(-13, -1)\nYes, I can move\n```\n\nNotice that there is no harm done if pupils try to move into a cell that is occupied. They simply miss their turn."}}]}},"pageContext":{"contentful_id":"4LIDN6SGRdsfjHXphGdt96"}}}