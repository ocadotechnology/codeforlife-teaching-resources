{"componentChunkName":"component---src-templates-worksheet-js","path":"/4fRqPs5f7hCPetprHcqIjV","result":{"data":{"contentfulWorksheet":{"worksheetTitle":"Teacher Challenge Guide 2","resourceSection":"Challenge 2","content":[{"__typename":"ContentfulFullWidthText","heading":{"name":"Introduction"},"content":{"content":"## Objectives\n\n* To further investigate the use of selection, random numbers and subroutines\n* To use computation to solve problems with code\n* To find out how to pick up artefacts in Kurono and check inventory status"}},{"__typename":"Contentful2ColumnLayout","heading":{"name":"Preparing the Lesson"},"leftColumn":{"leftColumn":"## Teacher Preparation\n\nRead over the pupil worksheet\n\n> ### Resources\n>You can find the Kurono user guide, cheat sheet and challenge resources on your Kurono dashboard: https://www.codeforlife.education/teach/kurono/dashboard"},"rightColumn":{"rightColumn":"## Timing\n\nOne lesson of approximately 50 minutes.\n\n> ### Pupilsâ€™ prior experience\n>Pupils should be familiar with Python programming,\nincluding the use of:\n* Variables\n* Assignment\n* Selection\n* Functions and procedures (subroutines)\n* Parameters"}},{"__typename":"ContentfulFullWidthText","heading":{"name":"Lesson Details"},"content":{"content":"This worksheet picks up from the end of worksheet 1 and pupils should have working code that outputs a message about the next cell. If necessary, explain the starter code on the worksheet *[Fig 1]*\n\n```\nimport random\n\ndef next_turn(world_state, avatar_state):\n    # Choose a random direction to move in\n    number = random.randint(1,4)\n    if number == 1:\n        new_dir = direction.NORTH\n    elif number == 2:\n        new_dir = direction.EAST\n    elif number == 3:\n        new_dir = direction.SOUTH\n    else:\n        new_dir = direction.WEST\n    # Get details about the cell you would move onto\n    next_cell = avatar_state.location + new_dir\n    if world_state.can_move_to(next_cell):\n        # This cell is free\n        action = MoveAction(new_dir)\n    else:\n        print(\"I can't move that way!\")\n        action = WaitAction()\n    return action\n```\n*[Fig 1]*"}},{"__typename":"ContentfulFullWidthText","heading":{"name":"Task 1 - Avoiding Obstacles"},"content":{"content":"The first challenge asks pupils to introduce a subroutine to help them choose another direction if they can't move in the direction chosen. You may need to recap on subroutines. \n\nHere is a solution:\n##### Choose another random direction\n\n```\nimport random\n\ndef next_turn(world_state, avatar_state):\n    new_dir = get_random_dir()\n\n    # Get details about the cell you would move into\n    next_cell = avatar_state.location + new_dir \n    if world_state.can_move_to(next_cell):\n        action = MoveAction(new_dir)\n    else:\n        print(\"I can't move that way! Choosing another direction...\")\n        action = MoveAction(get_random_dir())\n\n    return action\n\ndef get_random_dir():\n    # Choose a random direction to move in\n    number = random.randint(1,4)\n    if number == 1:\n        new_dir = direction.NORTH\n    elif number == 2:\n        new_dir = direction.EAST\n    elif number == 3:\n        new_dir = direction.SOUTH\n    else:\n        new_dir = direction.WEST\n\n    return new_dir\n```"}},{"__typename":"ContentfulFullWidthText","heading":{"name":"Task 1 - Extension: Favour multiple directions"},"content":{"content":"**Extension Task**\n\nThis solution favours moving South or West by increasing the number of random numbers generated and allocating more of them to a South or West move. Your pupils may do this in a different way. \n\n```\nimport random\n\ndef next_turn(world_state, avatar_state):\n    new_dir = get_random_dir()\n    # Get details about the cell you would move onto\n    next_cell = avatar_state.location + new_dir\n    if world_state.can_move_to(next_cell):\n        action = MoveAction(new_dir)\n    else:\n        print(\n            \"I can't move that way! \",\n            \"Choosing another direction...\",\n        )\n        action = MoveAction(get_random_dir())\n\n    return action\n\ndef get_random_dir():\n    # Choose a random direction to move in\n    number = random.randit(1, 10)\n    if number == 1:\n        new_dir = direction.NORTH\n    elif number == 2:\n        new_dir = direction.EAST\n    elif number < 7:\n        new_dir = direction.SOUTH\n    else:\n        new_dir = direction.WEST\n\n    return new_dir\n```"}},{"__typename":"ContentfulFullWidthText","heading":{"name":"Task 2 - Pick up an artefact"},"content":{"content":"Part of the story behind Kurono is that pupils travel through time to collect artefacts for a museum. This task allows pupils to start interacting with artefacts on the map. In later worksheets, pupils will find that there are different types of artefact but, for now, they're all the same.\n\nPupils can only pick up an artefact if their avatar is on the same cell of the map. They can use the location information to check if there is an artefact there. They might be able to see one, but the program needs to use a selection (if) statement to work it out! *[Fig 2]*\n\n```\ncoordinates = avatar_state.location\ncurrent_cell = world_state.get_cell(avatar_state.location)\nif current_cell.has_artefact():\n    print(\"found one\")\n```\n*[Fig 2]*"}},{"__typename":"Contentful2ColumnLayout","heading":null,"leftColumn":{"leftColumn":"**Example Solution**\n\nThey can then pick up any artefact they find by setting their turn action to a `PickupAction` instead of a `MoveAction` or `WaitAction`.\n\n```\naction = PickupAction()\nreturn action\n```\n\nYou might need to remind pupils that a subroutine can only return one thing and should only ever have one return point. In terms of Kurono, what they return is their move and they can only make one move.\n\nPupils should output a message if they pick up an artefact."},"rightColumn":{"rightColumn":"**Example Solution**\n\n```\nimport random\n\ndef next_turn(world_state, avatar_state):\n    # Check to see if there is an artefact on \n    # the current cell\n    current_cell = world_state.get_cell(\n        avatar_state.location\n    )\n    if current_cell.has_artefact():\n        print(\"Found an artefact!\")\n        action = PickupAction()\n    else:\n        # Choose a random direction to move in\n        number = random.randint(1, 4)\n        if number == 1:\n            new_dir = direction.NORTH\n        elif number == 2:\n            new_dir = direction.EAST\n        elif number == 3:\n            new_dir = direction.SOUTH\n        else:\n            new_dir = direction.WEST\n\n        action = MoveAction(new_dir)\n\n    return action\n```"}},{"__typename":"ContentfulFullWidthText","heading":{"name":"Summary"},"content":{"content":"These tasks have allowed pupils to further explore the use of selection and subroutines, as well as interacting with the Kurono API. In the next worksheet, pupils will be able to scan areas of the map to look for artefacts and start to discover different types of artefact."}}]}},"pageContext":{"contentful_id":"4fRqPs5f7hCPetprHcqIjV"}}}